name: Test

on:
  schedule:
    - cron: "0 7 * * 0"
  push:
    branches:
      - master
  pull_request:
    paths:
      - "**.md"
      - "**.ts"
      - "deno.jsonc"
      - ".github/workflows/test.yml"

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail {0}

jobs:
  check:
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        deno_version:
          - "1.45.0"
          - "1.x"
          - "2.x"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Remove newer version of lock file
        if: startswith(matrix.deno_version, '1.')
        run: rm deno.lock

      - uses: denoland/setup-deno@v2
        with:
          deno-version: "${{ matrix.deno_version }}"

      - name: Check
        run: deno task check

      - name: Check doc
        run: deno task check:doc

  check-publish:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        deno-version:
          - "2.x"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2
        with:
          deno-version: "${{ matrix.deno-version }}"

      - name: Check slow types
        run: deno task check:publish

  test:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        deno_version:
          - "1.45.0"
          - "2.3.0"
          - "2.x"
        host_version:
          - id: min-supported
            vim: "v9.1.0448"
            nvim: "v0.10.0"
            denops: "v7.1.0"
          - id: latest
            vim: "v9.1.1646"
            nvim: "v0.11.3"
            denops: "main"
        exclude:
          - deno_version: "1.45.0"
            host_version:
              id: latest
          - deno_version: "2.3.0"
            host_version:
              id: min-supported
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Remove newer version of lock file
        if: startswith(matrix.deno_version, '1.')
        run: rm deno.lock

      - uses: denoland/setup-deno@v2
        id: setup-deno
        with:
          deno-version: "${{ matrix.deno_version }}"

      - name: Get denops
        run: |
          git clone --depth 1 --branch "${{ matrix.host_version.denops }}" https://github.com/vim-denops/denops.vim /tmp/denops.vim
          echo "DENOPS_TEST_DENOPS_PATH=/tmp/denops.vim" >> "$GITHUB_ENV"

      - uses: rhysd/action-setup-vim@v1
        id: vim
        with:
          version: "${{ matrix.host_version.vim }}"

      - uses: rhysd/action-setup-vim@v1
        id: nvim
        with:
          neovim: true
          version: "${{ matrix.host_version.nvim }}"

      - name: Export executables
        run: |
          echo "DENOPS_TEST_VIM_EXECUTABLE=${{ steps.vim.outputs.executable }}" >> "$GITHUB_ENV"
          echo "DENOPS_TEST_NVIM_EXECUTABLE=${{ steps.nvim.outputs.executable }}" >> "$GITHUB_ENV"

      - name: Check versions
        run: |
          deno --version
          ${DENOPS_TEST_VIM_EXECUTABLE} --version
          ${DENOPS_TEST_NVIM_EXECUTABLE} --version

      - name: Perform pre-cache
        run: |
          (cd ${DENOPS_TEST_DENOPS_PATH} && deno cache denops/@denops-private/mod.ts)
          deno cache ./batch/accumulate_test.ts

      - name: Run tests
        run: deno task test:coverage
        timeout-minutes: 5

      - run: |
          deno task coverage --lcov > coverage.lcov

      - uses: codecov/codecov-action@v4
        with:
          os: ${{ runner.os }}
          files: ./coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}
